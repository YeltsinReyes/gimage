{
    "docs": [
        {
            "location": "/",
            "text": "GImage\n\u00b6\n\n\n\n\nA PHP library for easy image handling.\n\n\n\n\n \n \n \n \n\n\nIntroduction\n\u00b6\n\n\nGImage\n is a simple and small library based on \nPHP Image Processing and GD\n for processing images without stress.\n\n\n\n\n\n\n\"A presentation card built with GImage\" - \nView code example\n\n\n\n\nFeatures\n\u00b6\n\n\n\n\nLoad an image from local path, URL or image resource.\n\n\nCreate shapes such as rectangles or ellipses with opacity.\n\n\nResize, scale or crop images proportionally.\n\n\nRotate images, shapes or texts.\n\n\nEmbed text with custom TTF fonts.\n\n\nCompose a pool of images with Canvas.\n\n\nSwap image formats such as JPEG, PNG and GIF.\n\n\nSave images in local or output on the browser.\n\n\nSave several copies of the same image.\n\n\nRender an image in-memory and return the resource.\n\n\n\n\nFor detailed instructions see the \ngetting started guide\n.",
            "title": "Introduction"
        },
        {
            "location": "/#gimage",
            "text": "A PHP library for easy image handling.",
            "title": "GImage"
        },
        {
            "location": "/#introduction",
            "text": "GImage  is a simple and small library based on  PHP Image Processing and GD  for processing images without stress.    \"A presentation card built with GImage\" -  View code example",
            "title": "Introduction"
        },
        {
            "location": "/#features",
            "text": "Load an image from local path, URL or image resource.  Create shapes such as rectangles or ellipses with opacity.  Resize, scale or crop images proportionally.  Rotate images, shapes or texts.  Embed text with custom TTF fonts.  Compose a pool of images with Canvas.  Swap image formats such as JPEG, PNG and GIF.  Save images in local or output on the browser.  Save several copies of the same image.  Render an image in-memory and return the resource.   For detailed instructions see the  getting started guide .",
            "title": "Features"
        },
        {
            "location": "/getting-started/",
            "text": "Getting started\n\u00b6\n\n\nInstallation\n\u00b6\n\n\n\n\nRequirements\n\n\nGImage requires \nPHP 7.0+\n and latest \nGD Extension\n.\n\n\n\n\nMake sure if \nGD extension\n is loaded. You can verify it using the following command:\n\n\nphp -r \n\"var_dump(extension_loaded('gd'));\"\n\n\n# bool(true)\n\n\n\n\n\nThen install GImage via \nComposer\n:\n\n\ncomposer require joseluisq/gimage\n\n\n\n\nUsage\n\u00b6\n\n\nLoading an external PNG image and saving it as JPG:\n\n\n<?php\n\n\n\nuse\n \nGImage\\Image\n;\n\n\n\n// PNG image (600x199)\n\n\n$url\n \n=\n \n'https://i.imgur.com/G5MR088.png'\n;\n\n\n\n$arch\n \n=\n \nnew\n \nImage\n();\n\n\n$arch\n\n    \n// Load from URL\n\n    \n->\nload\n(\n$url\n)\n\n    \n// Scale to 50% (300x99)\n\n    \n->\nscale\n(\n0.5\n)\n\n    \n// Change the format to JPG\n\n    \n->\ntoJPG\n()\n\n    \n// Saving in local path\n\n    \n->\nsave\n(\n'arch.jpg'\n);",
            "title": "Getting Started"
        },
        {
            "location": "/getting-started/#getting-started",
            "text": "",
            "title": "Getting started"
        },
        {
            "location": "/getting-started/#installation",
            "text": "Requirements  GImage requires  PHP 7.0+  and latest  GD Extension .   Make sure if  GD extension  is loaded. You can verify it using the following command:  php -r  \"var_dump(extension_loaded('gd'));\"  # bool(true)   Then install GImage via  Composer :  composer require joseluisq/gimage",
            "title": "Installation"
        },
        {
            "location": "/getting-started/#usage",
            "text": "Loading an external PNG image and saving it as JPG:  <?php  use   GImage\\Image ;  // PNG image (600x199)  $url   =   'https://i.imgur.com/G5MR088.png' ;  $arch   =   new   Image ();  $arch \n     // Load from URL \n     -> load ( $url ) \n     // Scale to 50% (300x99) \n     -> scale ( 0.5 ) \n     // Change the format to JPG \n     -> toJPG () \n     // Saving in local path \n     -> save ( 'arch.jpg' );",
            "title": "Usage"
        },
        {
            "location": "/classes/image/",
            "text": "Image\n\u00b6\n\n\n\n\nImage\n class is the parent class for \nFigure\n and \nCanvas\n classes.\n\n\n\n\nSaving\n\u00b6\n\n\nThe example below loads and external imagen and save it on local.\n\n\n\n\nTip\n\n\nload(f)\n function can load an image file from any url or local valid path.\n\n\n\n\n<?php\n\n\n\nuse\n \nGImage\\Image\n;\n\n\n\n$img\n \n=\n \nnew\n \nImage\n();\n\n\n$img\n\n    \n->\nload\n(\n'https://i.imgur.com/G5MR088.png'\n)\n\n    \n->\nscale\n(\n0.5\n)\n\n    \n->\nsave\n(\n'/home/my_user/images/myimage.png'\n);\n\n\n\n\n\nOutput\n\u00b6\n\n\nLoading an image from local path, scale (50%) and output it on the browser.\n\n\n<?php\n\n\n\nuse\n \nGImage\\Image\n;\n\n\n\n$img\n \n=\n \nnew\n \nImage\n();\n\n\n$img\n\n    \n->\nload\n(\n'/home/my_user/images/my_image.png'\n)\n\n    \n->\nscale\n(\n0.5\n)\n\n    \n->\noutput\n();\n\n\n\n\n\nPreserve resource\n\u00b6\n\n\nsave()\n and \noutput()\n functions remove the image resource \nin memory\n after processing.\nTo preserve the image resource for future processings only call \npreserve()\n function before saving or outputing, then \npreserve(false)\n when your processing have been completed.\n\n\n<?php\n\n\n\nuse\n \nGImage\\Image\n;\n\n\n\n$img\n \n=\n \nnew\n \nImage\n();\n\n\n$img\n\n    \n->\nload\n(\n'/home/my_user/images/my_image.png'\n)\n\n    \n->\ncenterCrop\n(\n50\n,\n \n50\n)\n\n    \n// preserve the resource before save\n\n    \n->\npreserve\n();\n\n    \n// save only\n\n    \n->\nsave\n();\n\n    \n// remove the resource after output\n\n    \n->\npreserve\n(\nfalse\n);\n\n    \n// output and remove the resource\n\n    \n->\noutput\n();\n\n\n\n\n\nReuse Image functions\n\u00b6\n\n\nFigure\n and \nCanvas\n extend from \nImage\n. This means that it's possible to use many functions like \ncrop()\n, \ncenterCrop()\n, \nrotate()\n and so on.\n\n\nFor example the code below creates an rectangle, set an opacity (75%) and save it as PNG.\n\n\n<?php\n\n\n\nuse\n \nGImage\\Figure\n;\n\n\n\n$figure\n \n=\n \nnew\n \nFigure\n(\n400\n,\n \n250\n);\n\n\n$figure\n\n    \n->\nsetBackgroundColor\n(\n0\n,\n \n0\n,\n \n255\n)\n\n    \n->\nsetOpacity\n(\n0.75\n)\n\n    \n->\ncreate\n()\n\n    \n->\nsave\n(\n'/home/my_user/images/reactangle.png'\n);",
            "title": "Image"
        },
        {
            "location": "/classes/image/#image",
            "text": "Image  class is the parent class for  Figure  and  Canvas  classes.",
            "title": "Image"
        },
        {
            "location": "/classes/image/#saving",
            "text": "The example below loads and external imagen and save it on local.   Tip  load(f)  function can load an image file from any url or local valid path.   <?php  use   GImage\\Image ;  $img   =   new   Image ();  $img \n     -> load ( 'https://i.imgur.com/G5MR088.png' ) \n     -> scale ( 0.5 ) \n     -> save ( '/home/my_user/images/myimage.png' );",
            "title": "Saving"
        },
        {
            "location": "/classes/image/#output",
            "text": "Loading an image from local path, scale (50%) and output it on the browser.  <?php  use   GImage\\Image ;  $img   =   new   Image ();  $img \n     -> load ( '/home/my_user/images/my_image.png' ) \n     -> scale ( 0.5 ) \n     -> output ();",
            "title": "Output"
        },
        {
            "location": "/classes/image/#preserve-resource",
            "text": "save()  and  output()  functions remove the image resource  in memory  after processing.\nTo preserve the image resource for future processings only call  preserve()  function before saving or outputing, then  preserve(false)  when your processing have been completed.  <?php  use   GImage\\Image ;  $img   =   new   Image ();  $img \n     -> load ( '/home/my_user/images/my_image.png' ) \n     -> centerCrop ( 50 ,   50 ) \n     // preserve the resource before save \n     -> preserve (); \n     // save only \n     -> save (); \n     // remove the resource after output \n     -> preserve ( false ); \n     // output and remove the resource \n     -> output ();",
            "title": "Preserve resource"
        },
        {
            "location": "/classes/image/#reuse-image-functions",
            "text": "Figure  and  Canvas  extend from  Image . This means that it's possible to use many functions like  crop() ,  centerCrop() ,  rotate()  and so on.  For example the code below creates an rectangle, set an opacity (75%) and save it as PNG.  <?php  use   GImage\\Figure ;  $figure   =   new   Figure ( 400 ,   250 );  $figure \n     -> setBackgroundColor ( 0 ,   0 ,   255 ) \n     -> setOpacity ( 0.75 ) \n     -> create () \n     -> save ( '/home/my_user/images/reactangle.png' );",
            "title": "Reuse Image functions"
        },
        {
            "location": "/classes/figure/",
            "text": "Figure\n\u00b6\n\n\n\n\nFigure\n class allows to create rectangles or ellipses.\n\n\n\n\nThe following example creates an rectangle, set an opacity (75%) and save it as PNG:\n\n\n<?php\n\n\n\nuse\n \nGImage\\Figure\n;\n\n\n\n$rectangle\n \n=\n \nnew\n \nFigure\n(\n400\n,\n \n250\n);\n\n\n$rectangle\n\n    \n->\nsetBackgroundColor\n(\n0\n,\n \n0\n,\n \n255\n)\n\n    \n->\nsetOpacity\n(\n0.75\n)\n\n    \n->\ncreate\n()\n\n    \n->\nsave\n(\n'/home/my_user/images/reactangle.png'\n);\n\n\n\n\n\nAs above example, we can also create an ellipse:\n\n\n<?php\n\n\n\nuse\n \nGImage\\Figure\n;\n\n\n\n$ellipse\n \n=\n \nnew\n \nFigure\n(\n300\n,\n \n300\n);\n\n\n$ellipse\n\n    \n->\nisEllipse\n()\n\n    \n->\nsetBackgroundColor\n(\n255\n,\n \n0\n,\n \n0\n)\n\n    \n->\nsetOpacity\n(\n0.5\n)\n\n    \n->\ncreate\n()\n\n    \n->\nsave\n(\n'/home/my_user/images/ellipse.png'\n);",
            "title": "Figure"
        },
        {
            "location": "/classes/figure/#figure",
            "text": "Figure  class allows to create rectangles or ellipses.   The following example creates an rectangle, set an opacity (75%) and save it as PNG:  <?php  use   GImage\\Figure ;  $rectangle   =   new   Figure ( 400 ,   250 );  $rectangle \n     -> setBackgroundColor ( 0 ,   0 ,   255 ) \n     -> setOpacity ( 0.75 ) \n     -> create () \n     -> save ( '/home/my_user/images/reactangle.png' );   As above example, we can also create an ellipse:  <?php  use   GImage\\Figure ;  $ellipse   =   new   Figure ( 300 ,   300 );  $ellipse \n     -> isEllipse () \n     -> setBackgroundColor ( 255 ,   0 ,   0 ) \n     -> setOpacity ( 0.5 ) \n     -> create () \n     -> save ( '/home/my_user/images/ellipse.png' );",
            "title": "Figure"
        },
        {
            "location": "/classes/text/",
            "text": "Text\n\u00b6\n\n\n\n\nText\n class allows to use text to be embedded into \nCanvas\n.\n\n\n\n\nExample below creates a text with opacity using a custom TTF font:\n\n\n\n\nTip\n\n\nUsing \nsetWidth()\n or \nsetHeight()\n methods we can control the width and height of the text on canvas.\n\n\n\n\n<?php\n\n\n\n$text\n \n=\n \nnew\n \nText\n(\n'My ustom text with opacity!'\n);\n\n\n$text\n\n    \n->\nsetWidth\n(\n400\n)\n\n    \n->\nsetHeight\n(\n250\n)\n\n    \n->\nsetTop\n(\n50\n)\n\n    \n->\nsetLeft\n(\n50\n)\n\n    \n->\nsetSize\n(\n22\n)\n\n    \n->\nsetOpacity\n(\n0.5\n)\n\n    \n->\nsetColor\n(\n255\n,\n \n255\n,\n \n255\n)\n\n    \n->\nsetFontface\n(\n'/home/my_user/fonts/Lato.ttf'\n);\n\n\n\n// Used as layout\n\n\n$layout\n \n=\n \nnew\n \nFigure\n(\n350\n,\n \n180\n);\n\n\n$layout\n\n    \n->\nsetBackgroundColor\n(\n300\n,\n \n300\n,\n \n300\n)\n\n    \n->\ncreate\n();\n\n\n\n$canvas\n \n=\n \nnew\n \nCanvas\n(\n$layout\n);\n\n\n$canvas\n\n    \n->\nappend\n(\n$text\n)\n\n    \n->\ntoPNG\n()\n\n    \n->\ndraw\n()\n\n    \n->\nsave\n(\n'/home/my_user/images/my_text.png'\n);",
            "title": "Text"
        },
        {
            "location": "/classes/text/#text",
            "text": "Text  class allows to use text to be embedded into  Canvas .   Example below creates a text with opacity using a custom TTF font:   Tip  Using  setWidth()  or  setHeight()  methods we can control the width and height of the text on canvas.   <?php  $text   =   new   Text ( 'My ustom text with opacity!' );  $text \n     -> setWidth ( 400 ) \n     -> setHeight ( 250 ) \n     -> setTop ( 50 ) \n     -> setLeft ( 50 ) \n     -> setSize ( 22 ) \n     -> setOpacity ( 0.5 ) \n     -> setColor ( 255 ,   255 ,   255 ) \n     -> setFontface ( '/home/my_user/fonts/Lato.ttf' );  // Used as layout  $layout   =   new   Figure ( 350 ,   180 );  $layout \n     -> setBackgroundColor ( 300 ,   300 ,   300 ) \n     -> create ();  $canvas   =   new   Canvas ( $layout );  $canvas \n     -> append ( $text ) \n     -> toPNG () \n     -> draw () \n     -> save ( '/home/my_user/images/my_text.png' );",
            "title": "Text"
        },
        {
            "location": "/classes/canvas/",
            "text": "Canvas\n\u00b6\n\n\n\n\nCanvas\n represents an area on which it can append images, text and figures.\n\n\n\n\n\n\nNote\n\n\nCanvas\n needs a \nFigure\n or \nImage\n which will be used as base element (layout).\n\n\n\n\nThe following example uses \nappend()\n method to attach elements to canvas.\n\n\n\n\nTip\n\n\nUsing  \nsetLeft()\n or \nsetTop()\n methods it can control the position (x,y) of the elements (\nFigure\n, \nImage\n or \nText\n) on canvas.\n\n\n\n\n<?php\n\n\n\nuse\n \nGImage\\Image\n;\n\n\nuse\n \nGImage\\Figure\n;\n\n\nuse\n \nGImage\\Canvas\n;\n\n\n\n$image\n \n=\n \nnew\n \nImage\n();\n\n\n$image\n\n    \n->\nload\n(\n'https://my_website.com/images/my_image.png'\n)\n\n\n\n$ellipse\n \n=\n \nnew\n \nFigure\n(\n200\n,\n \n200\n);\n\n\n$ellipse\n\n    \n->\nisEllipse\n()\n\n    \n->\nsetBackgroundColor\n(\n200\n,\n \n0\n,\n \n0\n)\n\n    \n->\nsetTop\n(\n60\n)\n\n    \n->\nsetLeft\n(\n70\n)\n\n    \n->\ncreate\n()\n\n\n\n// Used as layout\n\n\n$layout\n \n=\n \nnew\n \nFigure\n(\n200\n,\n \n200\n);\n\n\n$layout\n\n    \n->\nsetBackgroundColor\n(\n0\n,\n \n0\n,\n \n255\n)\n\n    \n->\ncreate\n()\n\n\n\n$canvas\n \n=\n \nnew\n \nCanvas\n(\n$layout\n);\n\n\n$canvas\n\n    \n->\nappend\n([\n$image\n,\n \n$ellipse\n])\n\n    \n->\ntoPNG\n()\n\n    \n->\ndraw\n()\n\n    \n->\nsave\n(\n'/home/my_user/images/my_composed_image.png'\n);",
            "title": "Canvas"
        },
        {
            "location": "/classes/canvas/#canvas",
            "text": "Canvas  represents an area on which it can append images, text and figures.    Note  Canvas  needs a  Figure  or  Image  which will be used as base element (layout).   The following example uses  append()  method to attach elements to canvas.   Tip  Using   setLeft()  or  setTop()  methods it can control the position (x,y) of the elements ( Figure ,  Image  or  Text ) on canvas.   <?php  use   GImage\\Image ;  use   GImage\\Figure ;  use   GImage\\Canvas ;  $image   =   new   Image ();  $image \n     -> load ( 'https://my_website.com/images/my_image.png' )  $ellipse   =   new   Figure ( 200 ,   200 );  $ellipse \n     -> isEllipse () \n     -> setBackgroundColor ( 200 ,   0 ,   0 ) \n     -> setTop ( 60 ) \n     -> setLeft ( 70 ) \n     -> create ()  // Used as layout  $layout   =   new   Figure ( 200 ,   200 );  $layout \n     -> setBackgroundColor ( 0 ,   0 ,   255 ) \n     -> create ()  $canvas   =   new   Canvas ( $layout );  $canvas \n     -> append ([ $image ,   $ellipse ]) \n     -> toPNG () \n     -> draw () \n     -> save ( '/home/my_user/images/my_composed_image.png' );",
            "title": "Canvas"
        },
        {
            "location": "/examples/cropping/",
            "text": "Cropping\n\u00b6\n\n\nCustom cropping\n\u00b6\n\n\nThe following example loads an image (\n600x199\n) and crops part of the image (\n200x100\n).\n\n\n\n\nTip\n\n\ncrop(w, h, x, y)\n is useful when we needs a custom cropping. we can specify the size and \nx\n, \ny\n coords.\n\n\n\n\n<?php\n\n\n\nuse\n \nGImage\\Image\n;\n\n\n\n// PNG image (600x199)\n\n\n$arch_url\n \n=\n \n'https://i.imgur.com/G5MR088.png'\n;\n\n\n\n$arch_img\n \n=\n \nnew\n \nImage\n();\n\n\n$arch_img\n\n    \n->\nload\n(\n$arch_url\n)\n\n    \n// crop (200px x 100px) x=10 and y=20\n\n    \n->\ncrop\n(\n200\n,\n \n100\n,\n \n10\n,\n \n20\n)\n\n    \n// save the resource\n\n    \n->\nsave\n(\n'crop.png'\n);\n\n\n\n\n\nCenter cropping\n\u00b6\n\n\nWe can also to do an automatic-size cropping. The example crops an image proportionally based on given values (width and height).\n\n\n\n\nTip\n\n\ncenterCrop(w, h)\n calculates the image size, resize and crop it proportionally and centered. Making the cropping contain most of the original image.\n\n\n\n\n<?php\n\n\n\nuse\n \nGImage\\Image\n;\n\n\n\n// PNG image (600x199)\n\n\n$arch_url\n \n=\n \n'https://i.imgur.com/G5MR088.png'\n;\n\n\n\n$arch_img\n \n=\n \nnew\n \nImage\n();\n\n\n$arch_img\n\n    \n->\nload\n(\n$arch_url\n)\n\n    \n// crop (80px x 80px)\n\n    \n->\ncenterCrop\n(\n80\n,\n \n80\n)\n\n    \n// save the resource\n\n    \n->\nsave\n(\n'center_crop.png'\n);",
            "title": "Cropping"
        },
        {
            "location": "/examples/cropping/#cropping",
            "text": "",
            "title": "Cropping"
        },
        {
            "location": "/examples/cropping/#custom-cropping",
            "text": "The following example loads an image ( 600x199 ) and crops part of the image ( 200x100 ).   Tip  crop(w, h, x, y)  is useful when we needs a custom cropping. we can specify the size and  x ,  y  coords.   <?php  use   GImage\\Image ;  // PNG image (600x199)  $arch_url   =   'https://i.imgur.com/G5MR088.png' ;  $arch_img   =   new   Image ();  $arch_img \n     -> load ( $arch_url ) \n     // crop (200px x 100px) x=10 and y=20 \n     -> crop ( 200 ,   100 ,   10 ,   20 ) \n     // save the resource \n     -> save ( 'crop.png' );",
            "title": "Custom cropping"
        },
        {
            "location": "/examples/cropping/#center-cropping",
            "text": "We can also to do an automatic-size cropping. The example crops an image proportionally based on given values (width and height).   Tip  centerCrop(w, h)  calculates the image size, resize and crop it proportionally and centered. Making the cropping contain most of the original image.   <?php  use   GImage\\Image ;  // PNG image (600x199)  $arch_url   =   'https://i.imgur.com/G5MR088.png' ;  $arch_img   =   new   Image ();  $arch_img \n     -> load ( $arch_url ) \n     // crop (80px x 80px) \n     -> centerCrop ( 80 ,   80 ) \n     // save the resource \n     -> save ( 'center_crop.png' );",
            "title": "Center cropping"
        },
        {
            "location": "/examples/swapping-formats/",
            "text": "Swapping formats\n\u00b6\n\n\nIt's possible to swapping image formats. The following example loads a PNG image and save it as JPG.\n\n\n<?php\n\n\n\nuse\n \nGImage\\Image\n;\n\n\n\n// PNG image (600x199)\n\n\n$arch_url\n \n=\n \n'https://i.imgur.com/G5MR088.png'\n;\n\n\n\n$arch_img\n \n=\n \nnew\n \nImage\n();\n\n\n$arch_img\n\n    \n->\nload\n(\n$arch_url\n)\n\n    \n->\ncrop\n(\n20\n,\n \n20\n)\n\n    \n->\ntoJPG\n()\n\n    \n->\nsave\n(\n'arch.jpg'\n);\n\n\n\n\n\nOr outputting it on browser:\n\n\n<?php\n\n\n\nuse\n \nGImage\\Image\n;\n\n\n\n// PNG image (600x199)\n\n\n$arch_url\n \n=\n \n'https://i.imgur.com/G5MR088.png'\n;\n\n\n\n$arch_img\n \n=\n \nnew\n \nImage\n();\n\n\n$arch_img\n\n    \n->\nload\n(\n$arch_url\n)\n\n    \n->\nscale\n(\n0.5\n)\n\n    \n->\ntoJPG\n()\n\n    \n->\noutput\n();",
            "title": "Swapping formats"
        },
        {
            "location": "/examples/swapping-formats/#swapping-formats",
            "text": "It's possible to swapping image formats. The following example loads a PNG image and save it as JPG.  <?php  use   GImage\\Image ;  // PNG image (600x199)  $arch_url   =   'https://i.imgur.com/G5MR088.png' ;  $arch_img   =   new   Image ();  $arch_img \n     -> load ( $arch_url ) \n     -> crop ( 20 ,   20 ) \n     -> toJPG () \n     -> save ( 'arch.jpg' );   Or outputting it on browser:  <?php  use   GImage\\Image ;  // PNG image (600x199)  $arch_url   =   'https://i.imgur.com/G5MR088.png' ;  $arch_img   =   new   Image ();  $arch_img \n     -> load ( $arch_url ) \n     -> scale ( 0.5 ) \n     -> toJPG () \n     -> output ();",
            "title": "Swapping formats"
        },
        {
            "location": "/examples/resizing/",
            "text": "Resizing\n\u00b6\n\n\nWidth resizing\n\u00b6\n\n\nResizing an image proportionally basing on the width (\nheight\n is calculated).\n\n\n<?php\n\n\n\nuse\n \nGImage\\Image\n;\n\n\n\n$image\n \n=\n \nnew\n \nImage\n();\n\n\n$image\n\n    \n->\nload\n(\n'https://i.imgur.com/G5MR088.png'\n)\n\n    \n// Resize from width\n\n    \n->\nresizeToWidth\n(\n200\n)\n\n    \n// Save on local\n\n    \n->\nsave\n(\n'resize_width_image.png'\n);\n\n\n\n\n\nHeight resizing\n\u00b6\n\n\nResizing an image proportionally basing on the height (\nwidth\n is calculated).\n\n\n<?php\n\n\n\nuse\n \nGImage\\Image\n;\n\n\n\n$image\n \n=\n \nnew\n \nImage\n();\n\n\n$image\n\n    \n->\nload\n(\n'https://i.imgur.com/G5MR088.png'\n)\n\n    \n// Resize from height\n\n    \n->\nresizeToHeight\n(\n80\n)\n\n    \n// Save on local\n\n    \n->\nsave\n(\n'resize_height_image.png'\n);\n\n\n\n\n\n\n\nTip\n\n\nUse \ngetPropWidth(height)\n and \ngetPropHeight(width)\n to get the proportional \nwidth\n or \nheight\n values only.\n\n\n\n\nScale\n\u00b6\n\n\nThe following example scales a PNG image 120%.\n\n\n\n\nTip\n\n\nThe \nscale(val)\n function value should be between 0 and 1\n\n\n\n\n<?php\n\n\n\nuse\n \nGImage\\Image\n;\n\n\n\n$image\n \n=\n \nnew\n \nImage\n();\n\n\n$image\n\n    \n->\nload\n(\n'https://i.imgur.com/G5MR088.png'\n)\n\n    \n// Scale 120%\n\n    \n->\nscale\n(\n1.2\n)\n\n    \n// Save on local\n\n    \n->\nsave\n(\n'rotate_image.png'\n);",
            "title": "Resizing"
        },
        {
            "location": "/examples/resizing/#resizing",
            "text": "",
            "title": "Resizing"
        },
        {
            "location": "/examples/resizing/#width-resizing",
            "text": "Resizing an image proportionally basing on the width ( height  is calculated).  <?php  use   GImage\\Image ;  $image   =   new   Image ();  $image \n     -> load ( 'https://i.imgur.com/G5MR088.png' ) \n     // Resize from width \n     -> resizeToWidth ( 200 ) \n     // Save on local \n     -> save ( 'resize_width_image.png' );",
            "title": "Width resizing"
        },
        {
            "location": "/examples/resizing/#height-resizing",
            "text": "Resizing an image proportionally basing on the height ( width  is calculated).  <?php  use   GImage\\Image ;  $image   =   new   Image ();  $image \n     -> load ( 'https://i.imgur.com/G5MR088.png' ) \n     // Resize from height \n     -> resizeToHeight ( 80 ) \n     // Save on local \n     -> save ( 'resize_height_image.png' );    Tip  Use  getPropWidth(height)  and  getPropHeight(width)  to get the proportional  width  or  height  values only.",
            "title": "Height resizing"
        },
        {
            "location": "/examples/resizing/#scale",
            "text": "The following example scales a PNG image 120%.   Tip  The  scale(val)  function value should be between 0 and 1   <?php  use   GImage\\Image ;  $image   =   new   Image ();  $image \n     -> load ( 'https://i.imgur.com/G5MR088.png' ) \n     // Scale 120% \n     -> scale ( 1.2 ) \n     // Save on local \n     -> save ( 'rotate_image.png' );",
            "title": "Scale"
        },
        {
            "location": "/examples/rotation/",
            "text": "Rotation\n\u00b6\n\n\nThe following example rotates a PNG image 90\u00b0.\n\n\n<?php\n\n\n\nuse\n \nGImage\\Image\n;\n\n\n\n$image\n \n=\n \nnew\n \nImage\n();\n\n\n$image\n\n    \n->\nload\n(\n'https://i.imgur.com/G5MR088.png'\n)\n\n    \n// Rotate 90\u00b0\n\n    \n->\nrotate\n(\n90\n)\n\n    \n// Save on local\n\n    \n->\nsave\n(\n'rotate_image.png'\n);",
            "title": "Rotation"
        },
        {
            "location": "/examples/rotation/#rotation",
            "text": "The following example rotates a PNG image 90\u00b0.  <?php  use   GImage\\Image ;  $image   =   new   Image ();  $image \n     -> load ( 'https://i.imgur.com/G5MR088.png' ) \n     // Rotate 90\u00b0 \n     -> rotate ( 90 ) \n     // Save on local \n     -> save ( 'rotate_image.png' );",
            "title": "Rotation"
        },
        {
            "location": "/examples/creating-figures/",
            "text": "Creating figures\n\u00b6\n\n\nThe Figure class supports two kind of figures like rectangles and ellipses.\n\n\n\n\nNote\n\n\nA figure is a rectangle by default.\n\n\n\n\nRectangle\n\u00b6\n\n\n<?php\n\n\n\nuse\n \nGImage\\Figure\n;\n\n\n\n$figure\n \n=\n \nnew\n \nFigure\n(\n350\n,\n \n200\n);\n\n\n$figure\n\n    \n// ->isRectangle()\n\n    \n->\nsetBackgroundColor\n(\n255\n,\n \n0\n,\n \n0\n)\n\n    \n->\ncreate\n()\n\n    \n->\nsave\n(\n'rectangle.png'\n);\n\n\n\n\n\nEllipse\n\u00b6\n\n\n<?php\n\n\n\nuse\n \nGImage\\Figure\n;\n\n\n\n$figure\n \n=\n \nnew\n \nFigure\n(\n200\n,\n \n200\n);\n\n\n$figure\n\n    \n->\nisEllipse\n()\n\n    \n->\nsetBackgroundColor\n(\n0\n,\n \n255\n,\n \n255\n)\n\n    \n->\nsetOpacity\n(\n0.5\n)\n\n    \n->\ncreate\n()\n\n    \n->\nsave\n(\n'ellipse.png'\n);",
            "title": "Creating figures"
        },
        {
            "location": "/examples/creating-figures/#creating-figures",
            "text": "The Figure class supports two kind of figures like rectangles and ellipses.   Note  A figure is a rectangle by default.",
            "title": "Creating figures"
        },
        {
            "location": "/examples/creating-figures/#rectangle",
            "text": "<?php  use   GImage\\Figure ;  $figure   =   new   Figure ( 350 ,   200 );  $figure \n     // ->isRectangle() \n     -> setBackgroundColor ( 255 ,   0 ,   0 ) \n     -> create () \n     -> save ( 'rectangle.png' );",
            "title": "Rectangle"
        },
        {
            "location": "/examples/creating-figures/#ellipse",
            "text": "<?php  use   GImage\\Figure ;  $figure   =   new   Figure ( 200 ,   200 );  $figure \n     -> isEllipse () \n     -> setBackgroundColor ( 0 ,   255 ,   255 ) \n     -> setOpacity ( 0.5 ) \n     -> create () \n     -> save ( 'ellipse.png' );",
            "title": "Ellipse"
        },
        {
            "location": "/examples/text-embedding/",
            "text": "Text embedding\n\u00b6\n\n\nGImage supports a text embedding with custom TTF fonts using \nText\n class with \nCanvas\n.\n\n\n\n\nTip\n\n\nUse \nsetAlign(str)\n, \nsetValign(str)\n functions for control the aligment, \nsetLineHeight(n)\n for lines space or \nsetLeft(x)\n and \nsetTop(y)\n for position on canvas.\n\n\n\n\n<?php\n\n\n\nuse\n \nGImage\\Text\n;\n\n\nuse\n \nGImage\\Figure\n;\n\n\nuse\n \nGImage\\Canvas\n;\n\n\n\n// figure layout used as canvas\n\n\n$figure\n \n=\n \nnew\n \nFigure\n(\n400\n,\n \n250\n);\n\n\n$figure\n\n    \n->\nsetBackgroundColor\n(\n47\n,\n \n42\n,\n \n39\n)\n\n    \n->\ncreate\n();\n\n\n\n// text definition\n\n\n$text\n \n=\n \nnew\n \nText\n(\n'My Text with opacity!'\n);\n\n\n$text\n\n    \n// box area size for text\n\n    \n->\nsetWidth\n(\n400\n)\n\n    \n->\nsetHeight\n(\n250\n)\n\n    \n// aligments\n\n    \n->\nsetAlign\n(\n'center'\n)\n \n// or \"none\"\n\n    \n->\nsetValign\n(\n'center'\n)\n \n// or \"none\"\n\n    \n// line height\n\n    \n->\nsetLineHeight\n(\n1.2\n)\n\n    \n// font size\n\n    \n->\nsetSize\n(\n22\n)\n\n    \n// font color\n\n    \n->\nsetColor\n(\n255\n,\n \n255\n,\n \n255\n)\n\n    \n// font face\n\n    \n->\nsetFontface\n(\n'/my/path/fonts/Lato.ttf'\n);\n\n\n    \n->\nsetOpacity\n(\n0.5\n)\n\n\n\n// canvas definition\n\n\n$canvas\n \n=\n \nnew\n \nCanvas\n(\n$figure\n);\n\n\n$canvas\n\n    \n// append the text element\n\n    \n->\nappend\n(\n$text\n)\n\n    \n->\ntoPNG\n()\n\n    \n->\ndraw\n()\n\n    \n->\nsave\n(\n'text.png'\n);",
            "title": "Text embedding"
        },
        {
            "location": "/examples/text-embedding/#text-embedding",
            "text": "GImage supports a text embedding with custom TTF fonts using  Text  class with  Canvas .   Tip  Use  setAlign(str) ,  setValign(str)  functions for control the aligment,  setLineHeight(n)  for lines space or  setLeft(x)  and  setTop(y)  for position on canvas.   <?php  use   GImage\\Text ;  use   GImage\\Figure ;  use   GImage\\Canvas ;  // figure layout used as canvas  $figure   =   new   Figure ( 400 ,   250 );  $figure \n     -> setBackgroundColor ( 47 ,   42 ,   39 ) \n     -> create ();  // text definition  $text   =   new   Text ( 'My Text with opacity!' );  $text \n     // box area size for text \n     -> setWidth ( 400 ) \n     -> setHeight ( 250 ) \n     // aligments \n     -> setAlign ( 'center' )   // or \"none\" \n     -> setValign ( 'center' )   // or \"none\" \n     // line height \n     -> setLineHeight ( 1.2 ) \n     // font size \n     -> setSize ( 22 ) \n     // font color \n     -> setColor ( 255 ,   255 ,   255 ) \n     // font face \n     -> setFontface ( '/my/path/fonts/Lato.ttf' ); \n\n     -> setOpacity ( 0.5 )  // canvas definition  $canvas   =   new   Canvas ( $figure );  $canvas \n     // append the text element \n     -> append ( $text ) \n     -> toPNG () \n     -> draw () \n     -> save ( 'text.png' );",
            "title": "Text embedding"
        },
        {
            "location": "/examples/composing-with-canvas/",
            "text": "Composing with canvas\n\u00b6\n\n\nCanvas class is useful to composing several elements like images, text and figures.\n\n\n\n\nTip\n\n\nCanvas \nappend(arr)\n function also supports an array of elements.\n\n\n\n\n<?php\n\n\n\nuse\n \nGImage\\Text\n;\n\n\nuse\n \nGImage\\Image\n;\n\n\nuse\n \nGImage\\Figure\n;\n\n\nuse\n \nGImage\\Canvas\n;\n\n\n\n$img1\n \n=\n \nnew\n \nImage\n();\n\n\n$img1\n\n    \n->\nload\n(\n'https://i.imgur.com/G5MR088.png'\n)\n\n    \n->\nscale\n(\n0.5\n);\n\n\n\n$figure1\n \n=\n \nnew\n \nFigure\n(\n300\n,\n \n150\n);\n\n\n$figure1\n\n    \n->\nsetBackgroundColor\n(\n10\n,\n \n20\n,\n \n30\n)\n\n    \n->\ncreate\n();\n\n\n\n$text1\n \n=\n \nnew\n \nText\n(\n'My awesome text!'\n);\n\n\n$text1\n\n    \n->\nsetSize\n(\n18\n)\n\n    \n->\nsetColor\n(\n255\n,\n \n255\n,\n \n255\n)\n\n    \n->\nsetFontface\n(\n'/my/path/fonts/times.ttf'\n);\n\n\n\n// used as canvas layout\n\n\n$figure0\n \n=\n \nnew\n \nFigure\n(\n400\n,\n \n250\n);\n\n\n$figure0\n\n    \n->\nsetBackgroundColor\n(\n50\n,\n \n20\n,\n \n30\n)\n\n    \n->\ncreate\n();\n\n\n\n$canvas\n \n=\n \nnew\n \nCanvas\n(\n$figure0\n);\n\n\n$canvas\n\n    \n// append every element\n\n    \n->\nappend\n(\n$figure1\n)\n\n    \n->\nappend\n(\n$img1\n)\n\n    \n->\nappend\n(\n$text1\n)\n\n    \n// as PNG format\n\n    \n->\ntoPNG\n()\n\n    \n// draw the canvas with all elements\n\n    \n->\ndraw\n()\n\n    \n->\nsave\n(\n'text.png'\n);\n\n\n\n\n\nFor more details check out \nthe presentation card\n example.",
            "title": "Composing with canvas"
        },
        {
            "location": "/examples/composing-with-canvas/#composing-with-canvas",
            "text": "Canvas class is useful to composing several elements like images, text and figures.   Tip  Canvas  append(arr)  function also supports an array of elements.   <?php  use   GImage\\Text ;  use   GImage\\Image ;  use   GImage\\Figure ;  use   GImage\\Canvas ;  $img1   =   new   Image ();  $img1 \n     -> load ( 'https://i.imgur.com/G5MR088.png' ) \n     -> scale ( 0.5 );  $figure1   =   new   Figure ( 300 ,   150 );  $figure1 \n     -> setBackgroundColor ( 10 ,   20 ,   30 ) \n     -> create ();  $text1   =   new   Text ( 'My awesome text!' );  $text1 \n     -> setSize ( 18 ) \n     -> setColor ( 255 ,   255 ,   255 ) \n     -> setFontface ( '/my/path/fonts/times.ttf' );  // used as canvas layout  $figure0   =   new   Figure ( 400 ,   250 );  $figure0 \n     -> setBackgroundColor ( 50 ,   20 ,   30 ) \n     -> create ();  $canvas   =   new   Canvas ( $figure0 );  $canvas \n     // append every element \n     -> append ( $figure1 ) \n     -> append ( $img1 ) \n     -> append ( $text1 ) \n     // as PNG format \n     -> toPNG () \n     // draw the canvas with all elements \n     -> draw () \n     -> save ( 'text.png' );   For more details check out  the presentation card  example.",
            "title": "Composing with canvas"
        },
        {
            "location": "/examples/render-images-in-memory/",
            "text": "Render images in-memory\n\u00b6\n\n\nThe following example renders an image in-memory and return the resource.\n\n\n<?php\n\n\n\nuse\n \nGImage\\Image\n;\n\n\n\n$img\n \n=\n \nnew\n \nImage\n();\n\n\n$arch_url\n \n=\n \n'https://i.imgur.com/G5MR088.png'\n;\n\n\n\n$resource\n \n=\n \n$img\n->\nload\n(\n$arch_url\n)\n\n    \n// Scale 120%\n\n    \n->\nscale\n(\n1.2\n)\n\n    \n// Rotate an image to -90\u00ba\n\n    \n->\nrotate\n(\n-\n90\n)\n\n    \n// Change to PNG\n\n    \n->\ntoPNG\n()\n\n    \n// Add opacity 70%\n\n    \n->\nsetOpacity\n(\n0.7\n)\n\n    \n// Render the image in-memory\n\n    \n->\nrender\n();\n\n\n\n// Output the resource (example only)\n\n\nheader\n(\n'Content-Type: image/png'\n);\n\n\n// Necessary for opacity to work\n\n\nimagesavealpha\n(\n$resource\n,\n \ntrue\n);\n\n\nimagepng\n(\n$resource\n,\n \nnull\n);",
            "title": "Render images in-memory"
        },
        {
            "location": "/examples/render-images-in-memory/#render-images-in-memory",
            "text": "The following example renders an image in-memory and return the resource.  <?php  use   GImage\\Image ;  $img   =   new   Image ();  $arch_url   =   'https://i.imgur.com/G5MR088.png' ;  $resource   =   $img -> load ( $arch_url ) \n     // Scale 120% \n     -> scale ( 1.2 ) \n     // Rotate an image to -90\u00ba \n     -> rotate ( - 90 ) \n     // Change to PNG \n     -> toPNG () \n     // Add opacity 70% \n     -> setOpacity ( 0.7 ) \n     // Render the image in-memory \n     -> render ();  // Output the resource (example only)  header ( 'Content-Type: image/png' );  // Necessary for opacity to work  imagesavealpha ( $resource ,   true );  imagepng ( $resource ,   null );",
            "title": "Render images in-memory"
        },
        {
            "location": "/examples/image-resource-loading/",
            "text": "Image resource loading\n\u00b6\n\n\nThe following example loads an image resource using the \nload($src)\n method.\n\n\n<?php\n\n\n\nuse\n \nGImage\\Image\n;\n\n\n\n// Create a image rectangle (240x100)\n\n\n$width\n \n=\n \n240\n;\n\n\n$height\n \n=\n \n100\n;\n\n\n$rectangle\n \n=\n \nimagecreatetruecolor\n(\n$width\n,\n \n$height\n);\n\n\n$green\n \n=\n \nimagecolorallocate\n(\n$rectangle\n,\n \n0\n,\n \n255\n,\n \n0\n);\n\n\nimagefilledrectangle\n(\n$rectangle\n,\n \n0\n,\n \n0\n,\n \n$width\n,\n \n$height\n,\n \n$green\n);\n\n\n\n// Load and process the rectangle image resource\n\n\n$img\n \n=\n \nnew\n \nImage\n();\n\n\n$img\n\n  \n->\nload\n(\n$rectangle\n)\n\n  \n// scale to 50%\n\n  \n->\nscale\n(\n0.5\n)\n\n  \n->\ntoPNG\n()\n\n  \n->\nsave\n(\n'rectangle.png'\n);",
            "title": "Image resource loading"
        },
        {
            "location": "/examples/image-resource-loading/#image-resource-loading",
            "text": "The following example loads an image resource using the  load($src)  method.  <?php  use   GImage\\Image ;  // Create a image rectangle (240x100)  $width   =   240 ;  $height   =   100 ;  $rectangle   =   imagecreatetruecolor ( $width ,   $height );  $green   =   imagecolorallocate ( $rectangle ,   0 ,   255 ,   0 );  imagefilledrectangle ( $rectangle ,   0 ,   0 ,   $width ,   $height ,   $green );  // Load and process the rectangle image resource  $img   =   new   Image ();  $img \n   -> load ( $rectangle ) \n   // scale to 50% \n   -> scale ( 0.5 ) \n   -> toPNG () \n   -> save ( 'rectangle.png' );",
            "title": "Image resource loading"
        },
        {
            "location": "/examples/creating-a-presentation-card/",
            "text": "Creating a presentation card\n\u00b6\n\n\n\n\nExample below makes a simple presentation card using \nImage\n, \nText\n, \nFigure\n and \nCanvas\n.\n\n\n<?php\n\n\n\nuse\n \nGImage\\Image\n;\n\n\nuse\n \nGImage\\Text\n;\n\n\nuse\n \nGImage\\Figure\n;\n\n\nuse\n \nGImage\\Canvas\n;\n\n\n\n// Creating an avatar image\n\n\n$avatar_image\n \n=\n \nnew\n \nImage\n();\n\n\n$avatar_image\n\n    \n->\nload\n(\n'https://assets-cdn.github.com/images/modules/logos_page/Octocat.png'\n)\n\n    \n->\ncenterCrop\n(\n100\n,\n \n100\n)\n\n    \n->\nsetTop\n(\n60\n)\n\n    \n->\nsetLeft\n(\n70\n);\n\n\n\n$about_text\n \n=\n \nnew\n \nText\n(\n\"MY AWESOME PRESENTATION CARD\n\\n\n~ BY GIMAGE ~\"\n);\n\n\n$about_text\n->\nsetSize\n(\n16\n)\n\n    \n->\nsetWidth\n(\n300\n)\n\n    \n->\nsetLeft\n(\n210\n)\n\n    \n->\nsetLineHeight\n(\n1.5\n)\n\n    \n->\nsetTop\n(\n75\n)\n\n    \n->\nsetColor\n(\n204\n,\n \n164\n,\n \n116\n)\n\n    \n->\nsetFontface\n(\n'fonts/Lato-Light.ttf'\n);\n\n\n\n$twitter_text\n \n=\n \nnew\n \nText\n(\n'@joseluisq/gimage'\n);\n\n\n$twitter_text\n\n    \n->\nsetSize\n(\n11\n)\n\n    \n->\nsetWidth\n(\n70\n)\n\n    \n->\nsetLeft\n(\n410\n)\n\n    \n->\nsetTop\n(\n210\n)\n\n    \n->\nsetColor\n(\n130\n,\n \n127\n,\n \n125\n)\n\n    \n->\nsetFontface\n(\n'fonts/Lato-Regular.ttf'\n);\n\n\n\n$canvas_figure\n \n=\n \nnew\n \nFigure\n(\n550\n,\n \n250\n);\n\n\n$canvas_figure\n\n    \n->\nsetBackgroundColor\n(\n47\n,\n \n42\n,\n \n39\n)\n\n    \n->\ncreate\n();\n\n\n\n$avatar_box\n \n=\n \nnew\n \nFigure\n(\n\n    \n$avatar_image\n->\ngetWidth\n()\n \n+\n \n16\n,\n\n    \n$avatar_image\n->\ngetHeight\n()\n \n+\n \n17\n\n\n);\n\n\n$avatar_box\n\n    \n->\nsetBackgroundColor\n(\n63\n,\n \n56\n,\n \n52\n)\n\n    \n->\nsetLeft\n(\n$avatar_image\n->\ngetLeft\n()\n \n-\n \n7\n)\n\n    \n->\nsetTop\n(\n$avatar_image\n->\ngetTop\n()\n \n-\n \n8\n)\n\n    \n->\ncreate\n();\n\n\n\n$avatar_box2\n \n=\n \nnew\n \nFigure\n(\n\n    \n$avatar_image\n->\ngetWidth\n()\n \n+\n \n3\n,\n\n    \n$avatar_image\n->\ngetHeight\n()\n \n+\n \n19\n\n\n);\n\n\n$avatar_box2\n\n    \n->\nsetBackgroundColor\n(\n79\n,\n \n72\n,\n \n67\n)\n\n    \n->\nsetLeft\n(\n$avatar_image\n->\ngetLeft\n()\n \n+\n \n7\n)\n\n    \n->\nsetTop\n(\n$avatar_image\n->\ngetTop\n()\n \n-\n \n9\n)\n\n    \n->\ncreate\n();\n\n\n\n$avatar_box3\n \n=\n \nnew\n \nFigure\n(\n120\n,\n \n240\n);\n\n\n$avatar_box3\n\n    \n->\nsetBackgroundColor\n(\n63\n,\n \n56\n,\n \n52\n)\n\n    \n->\ncreate\n();\n\n\n\n$line_vertical\n \n=\n \nnew\n \nFigure\n(\n600\n,\n \n10\n);\n\n\n$line_vertical\n\n    \n->\nsetBackgroundColor\n(\n119\n,\n \n99\n,\n \n77\n)\n\n    \n->\nsetTop\n(\n240\n)\n\n    \n->\ncreate\n();\n\n\n\n$line_horizontal\n \n=\n \nnew\n \nFigure\n(\n1\n,\n \n240\n);\n\n\n$line_horizontal\n\n    \n->\nsetBackgroundColor\n(\n79\n,\n \n72\n,\n \n67\n)\n\n    \n->\nsetLeft\n(\n120\n)\n\n    \n->\ncreate\n();\n\n\n\n$canvas\n \n=\n \nnew\n \nCanvas\n(\n$canvas_figure\n);\n\n\n$canvas\n\n    \n->\nappend\n([\n\n        \n$line_horizontal\n,\n\n        \n$avatar_box2\n,\n\n        \n$avatar_box3\n,\n\n        \n$avatar_box\n,\n\n        \n$avatar_image\n,\n\n        \n$about_text\n,\n\n        \n$twitter_text\n,\n\n        \n$line_vertical\n,\n\n    \n])\n\n    \n->\ntoPNG\n()\n\n    \n->\ndraw\n()\n\n    \n->\nsave\n(\n'card.png'\n);",
            "title": "Creating a presentation card"
        },
        {
            "location": "/examples/creating-a-presentation-card/#creating-a-presentation-card",
            "text": "Example below makes a simple presentation card using  Image ,  Text ,  Figure  and  Canvas .  <?php  use   GImage\\Image ;  use   GImage\\Text ;  use   GImage\\Figure ;  use   GImage\\Canvas ;  // Creating an avatar image  $avatar_image   =   new   Image ();  $avatar_image \n     -> load ( 'https://assets-cdn.github.com/images/modules/logos_page/Octocat.png' ) \n     -> centerCrop ( 100 ,   100 ) \n     -> setTop ( 60 ) \n     -> setLeft ( 70 );  $about_text   =   new   Text ( \"MY AWESOME PRESENTATION CARD \\n ~ BY GIMAGE ~\" );  $about_text -> setSize ( 16 ) \n     -> setWidth ( 300 ) \n     -> setLeft ( 210 ) \n     -> setLineHeight ( 1.5 ) \n     -> setTop ( 75 ) \n     -> setColor ( 204 ,   164 ,   116 ) \n     -> setFontface ( 'fonts/Lato-Light.ttf' );  $twitter_text   =   new   Text ( '@joseluisq/gimage' );  $twitter_text \n     -> setSize ( 11 ) \n     -> setWidth ( 70 ) \n     -> setLeft ( 410 ) \n     -> setTop ( 210 ) \n     -> setColor ( 130 ,   127 ,   125 ) \n     -> setFontface ( 'fonts/Lato-Regular.ttf' );  $canvas_figure   =   new   Figure ( 550 ,   250 );  $canvas_figure \n     -> setBackgroundColor ( 47 ,   42 ,   39 ) \n     -> create ();  $avatar_box   =   new   Figure ( \n     $avatar_image -> getWidth ()   +   16 , \n     $avatar_image -> getHeight ()   +   17  );  $avatar_box \n     -> setBackgroundColor ( 63 ,   56 ,   52 ) \n     -> setLeft ( $avatar_image -> getLeft ()   -   7 ) \n     -> setTop ( $avatar_image -> getTop ()   -   8 ) \n     -> create ();  $avatar_box2   =   new   Figure ( \n     $avatar_image -> getWidth ()   +   3 , \n     $avatar_image -> getHeight ()   +   19  );  $avatar_box2 \n     -> setBackgroundColor ( 79 ,   72 ,   67 ) \n     -> setLeft ( $avatar_image -> getLeft ()   +   7 ) \n     -> setTop ( $avatar_image -> getTop ()   -   9 ) \n     -> create ();  $avatar_box3   =   new   Figure ( 120 ,   240 );  $avatar_box3 \n     -> setBackgroundColor ( 63 ,   56 ,   52 ) \n     -> create ();  $line_vertical   =   new   Figure ( 600 ,   10 );  $line_vertical \n     -> setBackgroundColor ( 119 ,   99 ,   77 ) \n     -> setTop ( 240 ) \n     -> create ();  $line_horizontal   =   new   Figure ( 1 ,   240 );  $line_horizontal \n     -> setBackgroundColor ( 79 ,   72 ,   67 ) \n     -> setLeft ( 120 ) \n     -> create ();  $canvas   =   new   Canvas ( $canvas_figure );  $canvas \n     -> append ([ \n         $line_horizontal , \n         $avatar_box2 , \n         $avatar_box3 , \n         $avatar_box , \n         $avatar_image , \n         $about_text , \n         $twitter_text , \n         $line_vertical , \n     ]) \n     -> toPNG () \n     -> draw () \n     -> save ( 'card.png' );",
            "title": "Creating a presentation card"
        },
        {
            "location": "/api/",
            "text": "API Documentation\n\u00b6\n\n\nv3.0\n\u00b6\n\n\n \nView documentation",
            "title": "API Documentation"
        },
        {
            "location": "/api/#api-documentation",
            "text": "",
            "title": "API Documentation"
        },
        {
            "location": "/api/#v30",
            "text": "View documentation",
            "title": "v3.0"
        }
    ]
}